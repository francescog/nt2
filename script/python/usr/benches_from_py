#! /usr/bin/env python
# -*- coding: iso-8859-15  -*-
##############################################################################
#         Copyright 2003 & onward LASMEA UMR 6602 CNRS/Univ. Clermont II
#         Copyright 2009 & onward LRI    UMR 8623 CNRS/Univ Paris Sud XI
#
#          Distributed under the Boost Software License, Version 1.0
#                 See accompanying file LICENSE.txt or copy at
#                     http://www.boost.org/LICENSE_1_0.txt
##############################################################################
__author__    = "Lapreste Jean-thierry (lapreste@univ-bpclermont.fr)"
__version__   = "$Revision: 1.0 $"
__date__      = "$Date: 2010    $"
__copyright__ = """ Copyright 2003 & onward LASMEA UMR 6602 CNRS/Univ. Clermont II
                    Copyright 2009 & onward LRI    UMR 8623 CNRS/Univ Paris Sud XI"""
__license__   = "Boost Software License, Version 1.0"

"""Allow to create  cpp unit test files for module functors
   from the data contained in py dictionnary files
   related to the functor
   """

import sys
import os
import re
import argparse

sys.path.insert(0,os.path.join(os.path.dirname(os.path.realpath(__file__)),'../lib',"nt2_basics"))
from nt2_modules        import Nt2_modules
sys.path.pop(0)
sys.path.insert(0,os.path.join(os.path.dirname(os.path.realpath(__file__)),'../lib',"bench_generation"))
from bench_creation     import create_bench
sys.path.pop(0)
sys.path.insert(0,os.path.join(os.path.dirname(os.path.realpath(__file__)),'../lib',"utils"))
from files_utils        import exist
sys.path.pop(0)


def listify(data) :
    if data is None : return data
    data = re.sub('\s|"|\[|\]','',data)
    data = re.sub("'",'',data)
    return data.split(',')

def get_parts(namespace) :
    parts = []
    if namespace.rd_values : parts.append('rd_verif')
    if namespace.pe_values : parts.append('pe_values')
    if namespace.eq_sp_values : parts.append('eq_verif')
    return parts

def showoptions(namespace):
    d = namespace.__dict__
    print("""units_from_py was invoked with:
    modules name(s)                = <%(md_name)s>
    functor list             (-f)  = <%(fct_list)s>
    modes                    (-m)  = <%(modes)s>
    all functors             (-a)  = <%(all_functors)s>
    show                     (-s)  = <%(show)s>
    write                    (-w)  = <%(write)s>
    backup on write          (-b)  = <%(backup)s>
    check  on write          (-c)  = <%(check)s>
    equally spaced values    (-e)  = <%(eq_sp_values)s>
    random values            (-r)  = <%(rd_values)s>
    peculiar values          (-p)  = <%(pe_values)s>
    options display          (-o)  = <%(options)s>
    """% d)
    print("""triggers -s -w -b -c -e -r -p and -o have a corresponding negation:
             -s -> -ns : --show -> --no_show
             etc.""")
    
if __name__ == "__main__" :
    parser = argparse.ArgumentParser(description="create cpp bench test files from existing py files")
    parser.add_argument("md_name",
                      help="""module name(s) for which benches are to be generated.
                      if the argument is NT2_ALL (case matter), all files are generarted
                      for all 'usr' modules (possibly moderated by the style option)
                      """)
    parser.add_argument("-a", "--all_functors",
                      dest="all_functors",
                      action="store_true",
                      default=False,
                      help="""generate test files for all functors of the given toolbox.
                      Incompatible with -f and with multiple modules.
                      This is not by default.
                      """)
    parser.add_argument("-am", "--all_modules",
                      dest="all_modules",
                      action="store_true",
                      default=False,
                      help="""generate test files for all functors of all modules
                      of the nt2 system, with given style found in the -st option
                      ('usr or 'sys' or both).
                      if present, and no style is defined, 'usr' is assumed
                      This is not by default.
                      """)
    parser.add_argument("-st", "--styles",
                      dest="styles",
                      default='usr',
                      help="""only active in conjonction with -am.
                      Define the style of the modules for which
                      benches are generated ('usr or 'sys' or both)
                      Default is 'usr'.
                      """)
    parser.add_argument("-np", "--no_peculiar_values",
                      dest="pe_values",
                      action="store_false",
                      default=False,
                      help="""does not generate test for peculiar values of the functors arguments
                      (default to False)
                      This is not the default.
                      """)
    parser.add_argument("-r", "--random_values",
                      dest="rd_values",
                      action="store_true",
                      default=False,
                      help="""generate tests for random values of the functors arguments
                      against an other implementation for (near)-equality. Obtains ranges and types infos
                      from the <fct_name>.py file.
                      This is not the default.
                      """)
    parser.add_argument("-nr", "--no_random_values",
                      dest="rd_values",
                      action="store_false",
                      default=False,
                      help="""does not generate tests for random values of the functors arguments.
                      This is the default.
                      """)
    parser.add_argument("-e", "--equally_spaced_values",
                      dest="eq_sp_values",
                      action="store_true",
                      default=False,
                      help="""generate tests for equally spaced values of the functors arguments
                      against an other implementation for (near)-equality. Obtains ranges and types infos
                      from the <fct_name>.py file.
                      This is not the default.
                      """)
    parser.add_argument("-ne", "--no_equally_spaced_values",
                      dest="eq_sp_values",
                      action="store_false",
                      default=False,
                      help="""does not generate tests for equally spaced values of the functors arguments.
                      This is the default.
                      """)
    parser.add_argument("-w", "--write",
                      dest="write",
                      action="store_true",
                      default = False,
                      help="""if present, effectively write the files to disk, possibly overwriting existing files
                      WITHOUT THIS OPTIONS NO FILE IS WRITTEN TO DISK
                      This is not the default.
                      """)
    parser.add_argument("-nw", "--no_write",
                      dest="write",
                      action="store_false",
                      default = False,
                      help="""does not write the files to disk (this option overcomes -b and -c)
                      This is the default.
                      """)
    parser.add_argument("-no", "--no_options_display",
                      dest="options",
                      action="store_false",
                      default = False,
                      help="""does not shows options with which the command was invoked.
                      This is the default.
                      """)
    parser.add_argument("-o", "--options_display",
                      dest="options",
                      action="store_true",
                      default = False,
                      help="""if present, shows options with which the command was invoked.
                      This is not the default.
                      """)
    parser.add_argument("-s", "--show",
                      dest="show",
                      action="store_true",
                      default = True,
                      help="""shows the generated text files results on standard output
                      This is the default.
                      """)
    parser.add_argument("-ns", "--no_show",
                      dest="show",
                      action="store_false",
                      default = True,
                      help="""if present, does not show the generated text
                      files results on standard output
                      This is not the default.
                      """)
    parser.add_argument("-cw","--check_on_write",
                      dest="check",
                      action="store_true",
                      default = False,
                      help="""write the files to disk only if it does not exist if -w is on, even with -b on.
                      This is not the default.
                      """)
    parser.add_argument("-nc","--no_check_on_write",
                      dest="check",
                      action="store_false",
                      default = False,
                      help="""if -w is on, files can be overwritten.
                      This is the default.
                      """)
    parser.add_argument("-b", "--backup_on_write",
                      dest="backup",
                      action="store_true",
                      default = True,
                      help="""backup existing files if they does exist, before replacing if -w is on.
                      if foo.cpp exist, foo.cpp is copied to foo.cpp.<i>.bak, then the new foo.cpp is written,
                      possibly overwriting the old one.
                      <i> is the first integer string for which the file foo.cpp.<i>.bak does not exist.
                      This is the default. (Use kill_bench_backup or restore_bench_from_backup to clean backups
                      or retrieving backed tests)
                      """)
    parser.add_argument("-nb", "--no_backup_on_write",
                      dest="backup",
                      action="store_false",
                      default = True,
                      help="""if present, doesn't backup existing tests files.
                      
                      This is not the default
                      """)
    parser.add_argument("-f", "--fct_list",
                      dest="fct_list",
                      default =  None,
                      help="""the list of functor names for which the tests files
                      are to be generated. If you want to generate for all functors
                      use -a (--all), but the two options are incompatible.
                      ----------------------------------------------------
                      For examples list of functors can be as:
                         --fct_list=['abs','average','toint','tofloat']
                         --fct_list='abs','average','toint','tofloat'
                         --fct_list=   abs,average,toint,tofloat,adds,muls
                         --fct_list= \"['abs',  average ,\"toint\",\"tofloat\"]\"
                      if you have spaces in your text list
                      """)
    parser.add_argument("-m", "--modes",
                      dest="modes",
                      default = 'scalar,simd',
                      help="""generate files for modes that can be chosen
                              as 'scalar' and/or 'simd' or both
                      """)
    namespace = parser.parse_args()
    all_functors = namespace.all_functors or (namespace.md_name == 'NT2_ALL')
    fct_list     = listify(namespace.fct_list)
    md_name      = listify(namespace.md_name)
    styles       = listify(namespace.styles)
    wr           = namespace.write
    sh           = namespace.show
    modes        = listify(namespace.modes)
    check        = namespace.check
    backup       = namespace.backup
    parts        = get_parts(namespace)
    options      = namespace.options

    if fct_list is None and not all_functors:
        print("""ERROR
                 please use option --all (in short -a)
                 or explicitely give the functor list (-f)
                 For examples
                    --fct_list=['abs','average','toint']
                 or --fct_list='abs','average','toint'
                 or --fct_list= abs,average,toint
                 or --fct_list= \"['abs',  average ,\"toint\"]\"
                 if you have spaces in your text list
                 """
              )
        showoptions(namespace)
    elif len(md_name)!=1  and (not all_functors or ( all_functors and not(fct_list is None))):
        print("""
                 ERROR
                 benches are generated for multiple modules, only for all functors
                 in each module: you must in this case add -a option and
                 suppress any -f option"""
              )
        showoptions(namespace)
    else :
        if fct_list is not None and all_functors :
            print("""
            ERROR
                 you must choose between -a and -f options:
                 if you do not want to generate all functors bench for this module
                 please suppress -f option else suppress -a option"""
              )
            showoptions(namespace)
        else :
            if len(md_name)==1 and md_name[0]=='NT2_ALL' :
                md_name = Nt2_modules().get_modules_list(styles)
            for md_n in md_name :
                create_bench(md_n,
                        fct_list=fct_list,
                        modes=modes,
                        show=sh,
                        write_files=wr,
                        check_on_write=check,
                        backup_on_write=backup)
            if (options) : showoptions(namespace)
